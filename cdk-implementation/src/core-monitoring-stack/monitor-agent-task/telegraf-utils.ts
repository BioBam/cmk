import { writeFileSync } from 'fs';
import { TimestreamProperties } from '../../AppEnvironment';

export interface ConfigProperties {
  /** Name of the timestream database to send the metrics to  */
  timestream: TimestreamProperties;
  /** Labels to include in the metrics. These are container tags or environment variables. Duplicates will be removed. */
  labels: string[];
  /** Container names to exclude from the metrics. Duplicates will be removed. */
  excludeContainerNames: string[];
}

export class TelegrafUtils {
  /**
   * This function writes the telegraf configuration with the parameter properties.
   */
  static createConfigFile(filePath: string, props: ConfigProperties) {
    const config = this.generateConfigString(props);
    writeFileSync(filePath, config);
  }

  private static generateConfigString(params: ConfigProperties): string {
    // remove duplicates and sort
    let dockerLabelInclude = [...new Set(params.labels)];
    dockerLabelInclude.sort();
    let containerNameExclude = [...new Set(params.excludeContainerNames)];
    containerNameExclude.sort();

    const baseConfig = `
# ~~ Generated by the monitoring CDK app code. To modify, edit the CONFIG .yaml file and run "cdk synth"
[agent]
  interval = "10s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = "0s"
  hostname = "\${INSTANCE_ID}"
  omit_hostname = false

[[inputs.docker]]
  endpoint = "unix:///var/run/docker.sock"
  gather_services = false
  source_tag = false
  container_name_include = []
  container_name_exclude = ${JSON.stringify(containerNameExclude)}
  timeout = "5s"
  perdevice = false
  perdevice_include = []
  total_include = ["cpu", "blkio", "network"]
  docker_label_include = ${JSON.stringify(dockerLabelInclude)}
  docker_label_exclude = []
  tag_env = ${JSON.stringify(dockerLabelInclude)}

[[outputs.timestream]]
  region = "\${AWS_REGION}" 
  database_name = "${params.timestream.database}"
  describe_database_on_start = false
  mapping_mode = "multi-table"
  create_table_if_not_exists = true
  create_table_magnetic_store_retention_period_in_days = ${params.timestream.magneticRetentionDays
      }
  create_table_memory_store_retention_period_in_hours = ${params.timestream.memoryRetentionHours
      }
  max_write_go_routines = 25
`;
    return baseConfig;
  }
}
